# ==============================================================================
# ビルドステージ
# ==============================================================================
# glibc 問題によるため alpine が使えない
FROM debian:bookworm-slim AS builder

WORKDIR /nlp

# 必要なツールをインストール
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    ca-certificates \
    curl \
    coreutils \
    git && \
    rm -rf /var/lib/apt/lists/*

# ONNX モデルとトークナイザーの環境変数を設定
ENV MODEL_NAME="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2" \
    DOWNLOAD_DIR="/onnx_model" \
    DOWNLOAD_MODEL_PATH="onnx/model_qint8_arm64.onnx" \
    DOWNLOAD_TOKENIZER_PATH="tokenizer.json" \
    SAVED_MODEL_PATH="model.onnx" \
    SAVED_TOKENIZER_PATH="tokenizer.json" \
    MODEL_VERSION="86741b4e3f5cb7765a600d3a3d55a0f6a6cb443d" \
    MAX_TOKEN_LENGTH=512 \
    OVERLAP_TOKEN_LENGTH=128 \
    MODEL_VECTOR_LENGTH=384

# ONNX モデルとトークナイザーのダウンロード
RUN mkdir -p ${DOWNLOAD_DIR} && \
    curl -fsSL -o "${DOWNLOAD_DIR}/${SAVED_MODEL_PATH}" \
        "https://huggingface.co/${MODEL_NAME}/resolve/${MODEL_VERSION}/${DOWNLOAD_MODEL_PATH}" && \
    curl -fsSL -o "${DOWNLOAD_DIR}/${SAVED_TOKENIZER_PATH}" \
        "https://huggingface.co/${MODEL_NAME}/resolve/${MODEL_VERSION}/${DOWNLOAD_TOKENIZER_PATH}"

# ライブラリパスを設定
ENV LIBRARY_PATH="/libraries"
RUN mkdir -p ${LIBRARY_PATH}

# libonnxruntime.so のインストール
RUN curl -fsSL -o onnxruntime-linux-aarch64-1.22.0.tgz https://github.com/microsoft/onnxruntime/releases/download/v1.22.0/onnxruntime-linux-aarch64-1.22.0.tgz && \
    tar -xz -f onnxruntime-linux-aarch64-1.22.0.tgz && \
    cp -r onnxruntime-linux-aarch64-1.22.0/lib/* ${LIBRARY_PATH}

# libtokenizers.a のインストール
RUN curl -fsSL -o libtokenizers.linux-aarch64.tar.gz https://github.com/daulet/tokenizers/releases/download/v1.22.2/libtokenizers.linux-aarch64.tar.gz && \
    tar -xz -f libtokenizers.linux-aarch64.tar.gz && \
    mv libtokenizers.a ${LIBRARY_PATH}

# Go のインストール
RUN curl -fsSL -o /tmp/go.tar.gz https://golang.org/dl/go1.24.4.linux-arm64.tar.gz && \
    tar -C /usr/local -xzf /tmp/go.tar.gz
ENV PATH="$PATH:/usr/local/go/bin"

# Go mod の初期化と依存関係のダウンロード
ENV GOPROXY=https://proxy.golang.org
COPY . .

# ビルド実行と確認ステップ
RUN go mod download && \
    CGO_ENABLED=1 go build -o main .

# ==============================================================================
# 実行ステージ
# ==============================================================================
FROM gcr.io/distroless/cc-debian12

WORKDIR /app

# ONNX モデルとトークナイザーの環境変数を設定
ENV DOWNLOAD_DIR="/onnx_model" \
    SAVED_MODEL_PATH="model.onnx" \
    SAVED_TOKENIZER_PATH="tokenizer.json" \
    LIBRARY_PATH="/libraries" \
    MODEL_VECTOR_LENGTH=384

# 必要なファイルをコピー
COPY --from=builder /nlp/main .
COPY --from=builder ${DOWNLOAD_DIR} ${DOWNLOAD_DIR}
COPY --from=builder ${LIBRARY_PATH} ${LIBRARY_PATH}

EXPOSE 8000

# 絶対パスで指定
CMD ["./main"]
